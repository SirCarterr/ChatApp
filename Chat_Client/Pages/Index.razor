@page "/"
@using Blazored.LocalStorage
@using Chat_Common
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.Http.Connections.Client
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.RegularExpressions
@using System.Net.Http.Headers
@inject ILocalStorageService _localStorage
@inject IChatService _chatService
@inject IChatNameService _chatNameService
@inject IMessageService _messageService
@inject NavigationManager _navigationManager
@inject IConfiguration _configuration
@inject IJSRuntime _jsRuntime

<AuthorizeView>
    <Authorized>
        <div class="row m-1">
            <div class="col-md-4 overflow-auto" style="max-height:850px">
                <div class="input-group">
                    <input type="text" @bind-value="SearchChat" class="form-control" placeholder="Search chat..." aria-describedby="button-search">
                    <button class="btn btn-primary" type="button" id="button-search" @onclick="() => SearchChats()"><span class="oi oi-magnifying-glass"></span></button>
                </div>
                <button class="btn btn-primary mb-3 my-2" type="button" @onclick="() => OpenDialog()">Add new chat <span class="oi oi-plus"></span></button>
                <h5 class="m-1">Chats</h5>
                <ul class="list-group" style="border:2px; border-color:gray; border-radius:5px">
                    @if (!IsChatsLoading)
                    {
                        @foreach (var chat in Notifications)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center" @onclick="() => LoadMessages(UserChats.First(c => c.Id == chat.ChatId))">
                                @if (IsRename)
                                {
                                    <div class="input-group">
                                        <input type="text" @bind-value="chat.ChatName" class="form-control" aria-describedby="button-edit">
                                        <button type="button" id="button-edit" class="btn btn-sm btn-danger" @onclick="() => CancelRename()"><span class="oi oi-x"></span></button>
                                        <button type="button" id="button-edit" class="btn btn-sm btn-success" @onclick="() => ChangeChatName(chat)"><span class="oi oi-check"></span></button>
                                    </div>
                                }
                                else
                                {
                                    <div class="btn-group">
                                        <button class="btn btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            <span class="oi oi-ellipses"></span>
                                        </button>
                                        <ul class="dropdown-menu" tabindex="-1">
                                            @if (UserChats.First(c => c.Id == chat.ChatId).CommunicationType.Equals("private"))
                                            {
                                                <li>
                                                    <button type="button" class="dropdown-item" @onclick="() => RenameChat()">Rename</button>
                                                </li>
                                            }
                                            else if (UserChats.First(c => c.Id == chat.ChatId).UserId.Equals(CurrentUser.Id))
                                            {
                                                <li>
                                                    <button type="button" class="dropdown-item" @onclick="() => OpenEditDialog(UserChats.First(c => c.Id == chat.ChatId))">Edit</button>
                                                </li>
                                            }
                                            <li>
                                                <button type="button" class="dropdown-item" @onclick="() => DeleteChat(chat)">
                                                    Delete
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                    @chat.ChatName
                                    @if (Notifications.FirstOrDefault(n => n.ChatName.Equals(chat.ChatName))!.NewMessages > 0)
                                    {
                                        <span class="badge bg-primary rounded-pill">
                                            @Notifications.FirstOrDefault(n => n.ChatName.Equals(chat.ChatName))!.NewMessages
                                        </span>
                                    }
                                }
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item">
                            <img src="/img/Spinner.gif" class="text-center">
                        </li>
                    }
                </ul>
            </div>
            <div class="col-md-8">
                @if (CurrentChat != null)
                {
                    <h3 class="m-1">@Notifications.FirstOrDefault(c => c.ChatId == CurrentChat.Id)?.ChatName</h3>
                }
                <div class="m-1 p-1 overflow-auto" @onwheel="() => OnScrollTop()" style="border-radius:5px; border-color:gray; border:thin; border-style: solid; height:700px" id="chatContainer">
                    @if (CurrentChatMessages == null)
                    {
                        <h4 class="text-center">Chat not choosen</h4>
                    }
                    else if (CurrentChatMessages.Any())
                    {
                        @foreach (var m in CurrentChatMessages)
                        {
                            if (m.IsReplyMessage)
                            {
                                if (m.FromUserId.Equals(CurrentUser.Id))
                                {
                                    <div class="d-flex flex-row justify-content-end mt-2 p-1">
                                        <div class="d-flex flex-column" style="height:auto; width:auto; max-width: 50%; background-color:cornflowerblue; border-radius:10px">
                                            <i class="small text-light mx-1" style="overflow-wrap:normal">@m.Message</i>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex flex-row justify-content-start mt-2 p-1">
                                        <div class="d-flex flex-column" style="height:auto; width:auto; max-width: 50%; background-color:lightslategrey; border-radius:10px">
                                            <i class="small mx-1 text-light" style="overflow-wrap:normal">@m.Message</i>
                                        </div>
                                    </div>
                                }
                            }
                            else if (m.FromUserId.Equals(CurrentUser.Id) && !m.DeletedForCaller)
                            {
                                <div class="d-flex flex-row justify-content-end my-2 p-2">
                                    <div class="d-flex flex-column" style="height:auto; width:auto; max-width: 50%">
                                        <b class="small text-end">@CurrentUser.Email</b>
                                        <div class="d-inline-flex justify-content-between small mx-1 p-1 text-start" style="overflow-wrap:normal; background-color:lightblue; border-radius:10px">
                                            <div>@m.Message</div>
                                            <div class="btn-group">
                                                <button class="btn btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                    ...
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li><a class="dropdown-item small" @onclick="() => EditMessage(m)">Edit</a></li>
                                                    <li><a class="dropdown-item small" @onclick="() => DeleteMessage(m, false)">Delete for yourself</a></li>
                                                    <li><a class="dropdown-item small" @onclick="() => DeleteMessage(m, true)">Delete for all</a></li>
                                                    <li><a class="dropdown-item small" @onclick="() => ReplyOnMessage(m, false)">Reply</a></li>
                                                </ul>
                                            </div>
                                        </div>
                                        @if (m.IsEdited)
                                        {
                                            <span class="small text-end me-1">edited</span>
                                        }
                                        else
                                        {
                                            <span class="small text-end me-1 time-left">@m.CreatedDate!.Value.ToString("HH:mm")</span>
                                        }
                                    </div>
                                </div>
                            }
                            else if (!m.FromUserId.Equals(CurrentUser.Id))
                            {
                                <div class="d-flex flex-row justify-content-start my-2 p-2">
                                    <div class="d-flex flex-column" style="height:auto; width:auto; max-width: 50%">
                                        <b class="small text-start">@AllUsers.FirstOrDefault(u => u.Id.Equals(m.FromUserId))!.Email</b>
                                        <div class="d-inline-flex justify-content-between small mx-1 p-1 text-start" style="overflow-wrap:normal; background-color:lightgrey; border-radius:10px">
                                            <div>@m.Message</div>
                                            <div class="btn-group">
                                                <button class="btn btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                    ...
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li><a class="dropdown-item small" @onclick="() => ReplyOnMessage(m, false)">Reply</a></li>
                                                    @if (!CurrentChat.UsersIds.Equals(m.FromUserId))
                                                    {
                                                        <li><a class="dropdown-item small" @onclick="() => ReplyOnMessage(m, true)">Reply privatly</a></li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                        @if (m.IsEdited)
                                        {
                                            <span class="small text-end me-1">edited</span>
                                        }
                                        else
                                        {
                                            <span class="small text-end me-1 time-left">@m.CreatedDate!.Value.ToString("HH:mm")</span>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <h4 class="text-center">No messages found</h4>
                    }
                </div>
                @if (ReplyMessage.ChatId != 0)
                {
                    <label class="m-1 bg-warning">@ReplyMessage.Message</label>
                }
                <div class="input-group">
                    @if (NewMessage.Id != 0)
                    {
                        <span class="input-group-text">Edit:</span>
                        <input type="text" @bind-value="NewMessage.Message" class="form-control" placeholder="Message..." aria-describedby="button-send">
                        <button class="btn btn-danger" type="button" id="button-send" @onclick="() => CancelEdit()"><span class="oi oi-x"></span></button>
                        <button class="btn btn-primary" type="button" id="button-send" @onclick="() => SendMessage()"><span class="oi oi-caret-right"></span></button>
                    }
                    else if (ReplyMessage.ChatId != 0)
                    {
                        <input type="text" @bind-value="NewMessage.Message" class="form-control" placeholder="Message..." aria-describedby="button-send">
                        <button class="btn btn-danger" type="button" id="button-send" @onclick="() => CancelReplying()"><span class="oi oi-x"></span></button>
                        <button class="btn btn-primary" type="button" id="button-send" @onclick="() => SendMessage()"><span class="oi oi-caret-right"></span></button>
                    }
                    else
                    {
                        <input type="text" @bind-value="NewMessage.Message" class="form-control" placeholder="Message..." aria-describedby="button-send">
                        <button class="btn btn-primary" type="button" id="button-send" disabled="@(CurrentChat != null ? false : true)" @onclick="() => SendMessage()"><span class="oi oi-caret-right"></span></button>
                    }
                </div>
            </div>
        </div>
        @if (IsDialogOpen)
        {
            <CreateChat OnClose="@OnDialogClose" AllUsers="@AllUsers" UserId="@CurrentUser.Id" EditChat="@EditChat"></CreateChat>
        }
    </Authorized>
</AuthorizeView>


@code {
    public string SearchChat { get; set; } = "";
    public ChatMessageDTO NewMessage { get; set; } = new();

    public bool IsChatsLoading { get; set; } = false;

    public UserDTO CurrentUser { get; set; } = new();
    public IEnumerable<ChatDTO> UserChats { get; set; } = new List<ChatDTO>();
    public IEnumerable<UserChatNameDTO> UserChatNames { get; set; } = new List<UserChatNameDTO>();
    public IEnumerable<UserDTO> AllUsers { get; set; } = new List<UserDTO>();
    public ChatDTO CurrentChat { get; set; }
    public List<ChatMessageDTO> CurrentChatMessages { get; set; }

    public HubConnection hubConnection { get; set; }
    public List<NotificationsDTO> Notifications { get; set; } = new List<NotificationsDTO>();

    public bool IsDialogOpen { get; set; } = false;

    public ChatMessageDTO ReplyMessage { get; set; } = new();
    public bool IsPrivateReply { get; set; } = false;
    public string PrivateReplyToUser { get; set; } = "";

    public ChatDTO? EditChat { get; set; }
    public bool IsRename { get; set; } = false;

    [Authorize]
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
        var token = await _localStorage.GetItemAsync<string>(SD.Local_Token);

        await SetHub(token);

        await LoadUsers();
        await LoadChats();

        foreach (var chat in UserChats)
        {
            await hubConnection.SendAsync("ConnectToChat", chat.Id.ToString());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("addTooltips");
    }

    private async Task SetHub(string token)
    {
        hubConnection = new HubConnectionBuilder().WithUrl(_configuration.GetValue<string>("BaseAPIUrl") + "/chatHub",
        HttpTransportType.LongPolling, options =>
        {
            options.AccessTokenProvider = () => Task.FromResult(token);
        }).Build();
        await hubConnection.StartAsync();


        hubConnection.On<string>("ReceiveNotification", async (groupId) =>
        {
            if (CurrentChat != null)
            {
                if (CurrentChat.Id.ToString().Equals(groupId))
                {
                    await LoadMessages(UserChats.FirstOrDefault(c => c.Id.ToString().Equals(groupId)));
                    StateHasChanged();
                    await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
                    StateHasChanged();
                }
                else
                {
                    LoadChatsWithNotification(int.Parse(groupId));
                }
            }
            else
            {
                LoadChatsWithNotification(int.Parse(groupId));
            }
        });
        hubConnection.On<string>("Receive", async (groupId) =>
        {
            NewMessage = new();
            await LoadMessages(UserChats.FirstOrDefault(c => c.Id.ToString().Equals(groupId)));
            StateHasChanged();
            await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
            StateHasChanged();
        });
        hubConnection.On("ChatAdded", async () =>
        {
            await LoadChats();
        });
        hubConnection.On<ChatDTO>("CheckChat", async (chat) =>
        {
            string[] users_splited = chat.Users.Split(';');

            foreach (var user in users_splited)
            {
                if (CurrentUser.Email.Equals(user))
                {
                    if (chat.CommunicationType.Equals("private"))
                    {
                        await _chatNameService.Create(new UserChatNameDTO() { ChatId = chat.Id, UserId = CurrentUser.Id, Name = AllUsers.First(u => u.Id.Equals(chat.UserId)).Email });
                    }
                    await hubConnection.SendAsync("AddChat", chat.Id.ToString());
                }
            }
        });
        hubConnection.On<string>("Refresh", async (groupId) =>
        {
            if (CurrentChat.Id.ToString().Equals(groupId))
            {
                await LoadMessages(UserChats.FirstOrDefault(c => c.Id.ToString().Equals(groupId)));
                StateHasChanged();
                await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
                StateHasChanged();
            }
        });
        hubConnection.On<string>("ChatDeleted", async (groupId) =>
        {
            if (CurrentChat != null)
            {
                if (CurrentChat.Id.ToString().Equals(groupId))
                {
                    CurrentChat = new();
                    CurrentChatMessages = new();
                    StateHasChanged();
                }
            }

            if (UserChats.First(c => c.Id.ToString().Equals(groupId)).CommunicationType.Equals("private"))
            {
                await _chatNameService.Delete(UserChatNames.First(n => n.ChatId.ToString().Equals(groupId)).Id);
            }
            await _jsRuntime.InvokeVoidAsync("ShowSwalToast2", $"Chat {Notifications.First(c => c.ChatId.ToString().Equals(groupId)).ChatName} deleted by creator");
            await LoadChats();
        });
        hubConnection.On<string, string>("ChatUpdated", async (groupId, userId) =>
        {
            if (CurrentUser.Id.Equals(userId))
            {
                await hubConnection.SendAsync("AddChat", groupId);
                await LoadChats();
            }
        });
        hubConnection.On<string, string>("CheckOnRemove", async (groupId, userId) =>
        {
            if (CurrentUser.Id.Equals(userId))
            {
                await hubConnection.SendAsync("RemoveFromChat", groupId);
                await _jsRuntime.InvokeVoidAsync("ShowSwalToast2", $"You were removed from chat: {Notifications.First(c => c.ChatId.ToString().Equals(groupId)).ChatName}");
                await LoadChats();
            }
        });
    }

    private async Task LoadChats()
    {
        IsChatsLoading = true;
        StateHasChanged();

        UserChats = await _chatService.GetChats();
        UserChatNames = await _chatNameService.GetNames(CurrentUser.Id);

        Notifications.Clear();
        if (UserChats.Any())
        {
            foreach (var chat in UserChats)
            {
                Notifications.Add(new NotificationsDTO()
                    {
                        ChatId = chat.Id,
                        ChatName = chat.CommunicationType.Equals("private") ? UserChatNames.FirstOrDefault(n => n.ChatId == chat.Id).Name : chat.GroupName!,
                        NewMessages = 0
                    });
            }
        }

        IsChatsLoading = false;
        StateHasChanged();
    }

    private void LoadChatsWithNotification(int chatId)
    {
        List<int> current_notifications = new List<int>();

        foreach (var n in Notifications)
        {
            current_notifications.Add(n.NewMessages);
        }

        Notifications.Clear();
        StateHasChanged();

        for (int i = 0; i < UserChats.Count(); i++)
        {
            if (UserChats.ToList()[i].Id == chatId)
            {
                Notifications.Add(new NotificationsDTO()
                    {
                        ChatId = UserChats.ToList()[i].Id,
                        ChatName = UserChats.ToList()[i].CommunicationType.Equals("private") ? UserChatNames.First(n => n.ChatId == UserChats.ToList()[i].Id).Name : UserChats.ToList()[i].GroupName!,
                        NewMessages = current_notifications[i] + 1
                    });
            }
            else
            {
                Notifications.Add(new NotificationsDTO() { ChatId = UserChats.ToList()[i].Id, NewMessages = current_notifications[i] });
            }
        }
        StateHasChanged();
    }

    private async Task LoadMessages(ChatDTO chat)
    {
        CurrentChat = chat;

        if (Notifications.FirstOrDefault(n => n.ChatId == chat.Id) != null)
        {
            Notifications.FirstOrDefault(n => n.ChatId == chat.Id)!.NewMessages = 0;
        }

        IEnumerable<ChatMessageDTO> chatMessages = await _messageService.GetChatMessages(chat.Id);
        CurrentChatMessages = chatMessages.ToList();
        NewMessage = new();
        StateHasChanged();
        await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
        StateHasChanged();
    }

    private async Task OnScrollTop()
    {
        if (CurrentChat != null && CurrentChatMessages.Any())
        {
            DotNetObjectReference<Index> objRef = DotNetObjectReference.Create(this);
            await _jsRuntime.InvokeAsync<string>("IsScrollTop", "chatContainer", objRef);
        }
    }

    [JSInvokable]
    public async void GetNewMessages() => await LoadMoreMessages();

    private async Task LoadMoreMessages()
    {
        IEnumerable<ChatMessageDTO> newMessages = await _messageService.GetMoreChatMessages(CurrentChat.Id, (int)CurrentChatMessages.First().Id);

        IEnumerable<ChatMessageDTO> mergedMessages = newMessages.Concat(CurrentChatMessages);
        CurrentChatMessages = mergedMessages.ToList();
        StateHasChanged();
        await _jsRuntime.InvokeAsync<string>("ScrollToCenter", "chatContainer");
        StateHasChanged();
    }

    private async Task LoadUsers()
    {
        AllUsers = await _chatService.GetUsers();
        StateHasChanged();
    }

    private async Task SearchChats()
    {
        if (String.IsNullOrEmpty(SearchChat) || String.IsNullOrWhiteSpace(SearchChat))
        {
            await LoadChats();
        }

        Notifications.Clear();
        foreach (var chat in UserChats)
        {
            string chatName = chat.CommunicationType.Equals("private") ? UserChatNames.First(n => n.ChatId == chat.Id).Name : chat.GroupName!;

            if (Regex.IsMatch(chatName.ToLower(), $"({SearchChat.ToLower()})"))
            {
                Notifications.Add(new NotificationsDTO() { ChatId = chat.Id, ChatName = chatName, NewMessages = 0 });
            }
        }

        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (NewMessage.Id != 0 && !NewMessage.Message.Equals(CurrentChatMessages.First(m => m.Id == NewMessage.Id)) &&
        !String.IsNullOrEmpty(NewMessage.Message) && !String.IsNullOrWhiteSpace(NewMessage.Message))
        {
            await _messageService.UpdateMessage(NewMessage);
            await hubConnection.SendAsync("SendMessage", CurrentChat.Id.ToString());
        }
        else if (ReplyMessage.ChatId != 0 && !String.IsNullOrEmpty(NewMessage.Message) && !String.IsNullOrWhiteSpace(NewMessage.Message))
        {
            if (IsPrivateReply)
            {
                bool chatExist = false;
                foreach (var chat in UserChats)
                {
                    if ((chat.UserId.Equals(CurrentUser.Id) && chat.UsersIds.Equals(ReplyMessage.FromUserId)) ||
                    (chat.UserId.Equals(ReplyMessage.FromUserId) && chat.UsersIds.Equals(CurrentUser.Id)))
                    {
                        ReplyMessage.ChatId = chat.Id;
                        NewMessage.ChatId = chat.Id;
                        NewMessage.FromUserId = CurrentUser.Id;

                        await _messageService.CreateMessage(ReplyMessage);
                        await _messageService.CreateMessage(NewMessage);
                        CancelReplying();
                        await hubConnection.SendAsync("SendMessage", chat.Id.ToString());
                        chatExist = true;
                    }
                }

                if (!chatExist)
                {
                    ChatDTO newChat = new ChatDTO()
                        {
                            CommunicationType = "private",
                            UserId = CurrentUser.Id,
                            Users = PrivateReplyToUser,
                            UsersIds = AllUsers.First(u => u.Email.Equals(PrivateReplyToUser)).Id
                        };

                    UserChatNameDTO userChatName = new UserChatNameDTO()
                        {
                            UserId = CurrentUser.Id,
                            Name = PrivateReplyToUser
                        };

                    var db_chat = await _chatService.CreateChat(newChat);

                    userChatName.ChatId = db_chat.Id;
                    await _chatNameService.Create(userChatName);

                    await LoadChats();
                    await hubConnection.SendAsync("ConnectToChat", newChat.Id.ToString());
                    await hubConnection.SendAsync("AddUserToChat", newChat.Id.ToString(), newChat.Users);

                    ReplyMessage.ChatId = db_chat.Id;
                    NewMessage.ChatId = db_chat.Id;
                    NewMessage.FromUserId = CurrentUser.Id;

                    await _messageService.CreateMessage(ReplyMessage);
                    await _messageService.CreateMessage(NewMessage);
                    CancelReplying();
                    await hubConnection.SendAsync("SendMessage", newChat.Id.ToString());
                }
            }
            else
            {
                NewMessage.FromUserId = CurrentUser.Id;
                NewMessage.ChatId = CurrentChat.Id;
                await _messageService.CreateMessage(ReplyMessage);
                await _messageService.CreateMessage(NewMessage);
                CancelReplying();
                await hubConnection.SendAsync("SendMessage", CurrentChat.Id.ToString());
            }
        }
        else if (!String.IsNullOrEmpty(NewMessage.Message) && !String.IsNullOrWhiteSpace(NewMessage.Message))
        {
            NewMessage.FromUserId = CurrentUser.Id;
            NewMessage.ChatId = CurrentChat.Id;

            await _messageService.CreateMessage(NewMessage);
            await hubConnection.SendAsync("SendMessage", CurrentChat.Id.ToString());
        }
    }

    private void EditMessage(ChatMessageDTO messageDTO)
    {
        NewMessage = new ChatMessageDTO()
            {
                Id = messageDTO.Id,
                Message = messageDTO.Message,
                ChatId = messageDTO.ChatId,
                CreatedDate = messageDTO.CreatedDate,
                FromUserId = messageDTO.FromUserId,
            };
        StateHasChanged();
    }

    private void CancelEdit()
    {
        NewMessage = new();
        StateHasChanged();
    }

    private async Task DeleteMessage(ChatMessageDTO message, bool forAll)
    {
        if (forAll)
        {
            await _messageService.DeleteMessage((int)message.Id);
            await hubConnection.SendAsync("RefreshChat", CurrentChat.Id.ToString());
        }
        else
        {
            message.DeletedForCaller = true;
            await _messageService.UpdateMessage(message);
            await LoadMessages(CurrentChat);
        }
    }

    private void ReplyOnMessage(ChatMessageDTO messageDTO, bool isPrivate)
    {
        ReplyMessage = new ChatMessageDTO()
            {
                ChatId = messageDTO.ChatId,
                FromUserId = CurrentUser.Id,
                IsReplyMessage = true
            };

        if (CurrentUser.Id.Equals(messageDTO.FromUserId))
        {
            ReplyMessage.Message = $"Reply to {CurrentUser.Email}: " + messageDTO.Message;
        }
        else
        {
            ReplyMessage.Message = $"Reply to {AllUsers.First(u => u.Id.Equals(messageDTO.FromUserId)).Email}: " + messageDTO.Message;
            PrivateReplyToUser = AllUsers.First(u => u.Id.Equals(messageDTO.FromUserId)).Email;
        }

        IsPrivateReply = isPrivate;
        StateHasChanged();
    }

    private void CancelReplying()
    {
        ReplyMessage = new();
        NewMessage = new();
        IsPrivateReply = false;
        PrivateReplyToUser = "";
        StateHasChanged();
    }

    public async Task DeleteChat(NotificationsDTO chat)
    {
        var chatDTO = UserChats.First(c => c.Id == chat.ChatId);
        if (CurrentUser.Id.Equals(chatDTO.UserId))
        {
            await _chatService.DeleteChat(chatDTO.Id);
            if (chatDTO.CommunicationType.Equals("private"))
            {
                await _chatNameService.Delete(UserChatNames.First(n => n.ChatId == chatDTO.Id).Id);
            }
            if (CurrentChat.Id == chatDTO.Id)
            {
                CurrentChat = new();
                CurrentChatMessages = null;
                StateHasChanged();
            }
            await LoadChats();
            //await LoadMessages(CurrentChat);
            await hubConnection.SendAsync("DeleteChat", chatDTO.Id.ToString());
        }
        else
        {
            chatDTO.UsersIds = Regex.Replace(chatDTO.UsersIds, $"({CurrentUser.Id})", "");
            chatDTO.Users = Regex.Replace(chatDTO.Users, $"({CurrentUser.Email})", "");

            if (chatDTO.CommunicationType.Equals("private"))
            {
                await _chatNameService.Delete(UserChatNames.First(n => n.ChatId == chatDTO.Id).Id);
            }

            NewMessage.ChatId = chatDTO.Id;
            NewMessage.FromUserId = CurrentUser.Id;
            NewMessage.Message = $"User {CurrentUser.Email} left";
            NewMessage.IsReplyMessage = true;

            await _chatService.UpdateChat(chatDTO);
            await _messageService.CreateMessage(NewMessage);
            await LoadChats();
            await LoadMessages(CurrentChat);
            await hubConnection.SendAsync("RemoveFromChat", chatDTO.Id.ToString());
            await hubConnection.SendAsync("SendMessage", chatDTO.Id.ToString());
        }
    }

    private async void OnDialogClose(bool accepted)
    {
        IsDialogOpen = false;

        if (accepted)
        {
            if (EditChat != null)
            {
                await LoadChats();
                ChatDTO chat_updated = UserChats.First(c => c.Id == EditChat.Id);
                var oldUsersIds = EditChat.UsersIds.Split(';');
                foreach (var userId in oldUsersIds)
                {
                    if (!Regex.IsMatch(chat_updated.UsersIds, $"({userId})"))
                    {
                        await hubConnection.SendAsync("UserDeleted", chat_updated.Id.ToString(), userId);
                    }
                }

                await hubConnection.SendAsync("RefreshUpdatedChat", chat_updated.Id.ToString());
                
                var usersIds = chat_updated.UsersIds.Split(';');
                foreach (var userId in usersIds)
                {
                    if (!Regex.IsMatch(EditChat.UsersIds, $"({userId})"))
                    {
                        await hubConnection.SendAsync("CheckUpdate", chat_updated.Id.ToString(), userId);
                    }
                }
                EditChat = null;
            }
            else
            {
                await LoadChats();
                await hubConnection.SendAsync("ConnectToChat", UserChats.LastOrDefault()?.Id.ToString());
                await hubConnection.SendAsync("AddUserToChat", UserChats.LastOrDefault());
            }
        }
    }

    private void OpenDialog()
    {
        IsDialogOpen = true;
        StateHasChanged();
    }

    private void OpenEditDialog(ChatDTO chat)
    {
        EditChat = chat;
        IsDialogOpen = true;
        StateHasChanged();
    }

    private async void ChangeChatName(NotificationsDTO chat)
    {
        var chatName = UserChatNames.First(n => n.ChatId == chat.ChatId);
        chatName.Name = chat.ChatName;
        await _chatNameService.Update(chatName);
        IsRename = false;
        await LoadChats();
    }

    private void RenameChat()
    {
        IsRename = true;
        StateHasChanged();
    }

    private void CancelRename()
    {
        IsRename = false;
        StateHasChanged();
    }
}